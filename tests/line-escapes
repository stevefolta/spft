#!/usr/bin/env python3

# Each line should end up saying "foo bar" (or occasionally some Unicode
# variant of that).

csi = "\x1B["
reset = f"{csi}0m"
greenback = f"{csi}43m"
greyback = f"{csi}48;2;192;192;192m"

def print_raw(*args, **kwargs):
	print(*args, **kwargs, end = '', flush = True)

def rainbowize(text, background = False):
	color_index = 1
	for c in text:
		ps_code = 48 if background else 38
		print_raw(f"{csi}{ps_code};5;{color_index}m{c}")
		color_index += 1
		if color_index >= 15:
			color_index = 0
	print_raw(f"{csi}0m")

print("Basic:")
print(f'foo{csi}Cbar')
print(f'foo xar{csi}D{csi}D{csi}Db')
print(f'{greenback}foo {greyback}bar{reset}')
print(f'normal {csi}1mbold{csi}22m {csi}3mitalic{csi}23m {csi}1;3mbold italic{reset}')

print()

# Tests of Line::replace_characters().
print("replace_characters():")
# Splitting a run.
print(f'foo xar\b\b\b{greenback}b{reset}')
print(f'{greenback}fxx {greyback}bar{reset}{csi}2Goo')
print(f'{greenback}fxx {greyback}bar{reset}{csi}2Goo ')
# Grow a run.
print(f'foo x\bbar')
# Before a run.
print(f"foo {greyback}bar\b\b\b{reset}{greenback}b{reset}")
# Within a run.
print(f"xxx xar\b\b\b\b\b\b\bfoo b")
# Unsplitting a run.
print(f"{greenback}xxx x{reset}ar\b\b\b\b\b\b\bfoo b")
# Replacing multiple runs.
print(f"{csi}31mx{csi}32mx{csi}33mx {csi}34mx{reset}ar\rfoo b")
rainbowize("fxx bar")
print(f"\rfoo")
rainbowize("fxx bar")
print(f"{csi}2Goo")
# UTF-8.
rainbowize("fx bar")
print(f"{csi}2G∞")
rainbowize("foo bar")
print(f"{csi}6Gä")
rainbowize("f∞ bar")
print(f"{csi}2Goo{csi}@")

print()

# Tests of Line::delete_characters().
print("delete_characters():")
# Deleting multiple runs.
rainbowize("foo de bar")
print(f"{csi}5G{csi}3P")



# Optional tests.
# Not enabled by default because they take time.

import time

# Cursor disable/enable.
def cursor_disable_test():
	print(f"foo bar\b\b\b{csi}?25l", end = '', flush = True)
	time.sleep(1)
	print(f"{csi}?25h", end = '', flush = True)
	time.sleep(1)
	print()
# cursor_disable_test()

# Inverse.
def inverse_test():
	print_raw(f"{csi}7mfoo{csi}27m bar\r")
	for i in range(7):
		time.sleep(1)
		print_raw(f"{csi}C")
	time.sleep(1)
	print()
# inverse_test()



